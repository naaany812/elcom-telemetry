MODULE main
VAR
    smoker_1 : process smoker(0, states, items, tableState);
    smoker_2 : process smoker(1, states, items, tableState);
    smoker_3 : process smoker(2, states, items, tableState);
    barmen   : process barmen(items, tableState, states);

states : array 0 .. 2 of {IDLE,SMOKING,TAKE} ;
tableState : {FULL,EMPTY};
items : array 0 .. 2 of {ONTABLE,NONE};

ASSIGN
    init(tableState) := EMPTY;
    init(items[0]) := NONE;
    init(items[1]) := NONE;
    init(items[2]) := NONE;



MODULE smoker(i, states, items, tableState)
DEFINE
    item := i;
    itemRight  := (i + 1) mod 3;
    itemLeft := (i + 2) mod 3;
    state := states[i];
ASSIGN
    init(states[i]) := IDLE;
    next(states[i]) := 
        case 
            state = SMOKING                                                 : {SMOKING, IDLE};
            (items[itemLeft] = ONTABLE) & (items[itemRight] = ONTABLE)      : TAKE;
            state = TAKE                                                    : SMOKING;
            TRUE : state;
        esac;
    next(tableState) :=
        case
            state = TAKE                                                    : EMPTY;
            TRUE : tableState;
        esac;
    next(items[0]) :=
        case
            (state = TAKE)                                                  : NONE;
            TRUE                                                            : items[0];
        esac;
    next(items[1]) :=
        case
            (state = TAKE)                                                  : NONE;
            TRUE                                                            : items[1];
        esac;
    next(items[2]) :=
        case
            (state = TAKE)                                                  : NONE;
            TRUE                                                            : items[2];
        esac;

MODULE barmen(items, tableState, states)
ASSIGN
    next(tableState) :=
        case
            (items[0] = ONTABLE) & (items[1] = ONTABLE)                         : FULL;
            (items[1] = ONTABLE) & (items[2] = ONTABLE)                         : FULL;
            (items[0] = ONTABLE) & (items[2] = ONTABLE)                         : FULL;
            TRUE : tableState;
        esac;

    next(items[0]) :=
        case
            (tableState = EMPTY) & ((items[1] = NONE) | (items[2] = NONE))            : ONTABLE;
            ((items[1] = ONTABLE) & (items[2] = ONTABLE))      : NONE;
            (tableState = FULL)                                                       : NONE;
            TRUE                                                                      : NONE;
        esac;
    next(items[1]) :=
        case
            (tableState = EMPTY) & ((items[0] = NONE) | (items[2] = NONE))            : ONTABLE;
            ((items[0] = ONTABLE) & (items[2] = ONTABLE))      : NONE;
            (tableState = FULL)                                                       : NONE;
            TRUE                                                                      : NONE;
        esac;
    next(items[2]) :=
        case
            (tableState = EMPTY) & ((items[0] = NONE) | (items[1] = NONE))            : ONTABLE;
            ((items[0] = ONTABLE) & (items[1] = ONTABLE))      : NONE;
            (tableState = FULL)                                                       : NONE;
            TRUE                                                                      : NONE;
        esac;


LTLSPEC -- если на столе нужные предметы, то курильщик будет курить
(
    F((items[0] = ONTABLE) & (items[1] = ONTABLE) -> F (states[2] = SMOKING))
)

LTLSPEC -- курильщик покурит дважды
(
    F(F(states[2] = SMOKING) -> X(states[2] = IDLE) -> X(states[2] = TAKE) -> X(states[2] = SMOKING))
)

LTLSPEC -- если на столе нужные предметы, то курильщик возьмет их
(
    F((items[0] = ONTABLE) &(items[1] = ONTABLE) -> X (states[2] = TAKE))
)

CTLSPEC -- на столе нет трех предметов
(
    !AG((items[0] = ONTABLE) & (items[1] = ONTABLE) & (items[2] = ONTABLE))
)

CTLSPEC -- на столе два предмета
(
    EF((items[0] = ONTABLE) & (items[1] = ONTABLE))
)

CTLSPEC -- никто из курильщков не курит хотя бы на одной ветви
(
    EF ((AF states[2] = IDLE) & (AF states[1] = IDLE) & (AF states[0] = IDLE))
)

CTLSPEC -- никто из курильщков не курит в любой ветви
(
    AF ((AF states[2] = IDLE) & (AF states[1] = IDLE) & (AF states[0] = IDLE))
)

CTLSPEC -- все курильщики курят одновременно
(
    EF ((AF states[2] = SMOKING) & (AF states[1] = SMOKING) & (AF states[0] = SMOKING))
)
